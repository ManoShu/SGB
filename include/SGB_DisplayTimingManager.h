#pragma once

#include <vector>

#include "SGB_types.h"

/*! \brief Internal class. Handles timing managemente for a `SGB_Display`. */
class SGB_DisplayTimingManager
{
public:
	/*! \brief Prepare the timing manager
	*
	* \param info The `SGB_DisplayInitInfo` generated by the parent `SGB_Display`.
	*/
	void Setup(SGB_DisplayInitInfo info);

	/*! \brief Starts a `SGB_Timer` to keep track of the total running time */
	Uint32 StartGlobalTimer();
	
	/*! \brief Calculates the delta time for the given frame. */
	void UpdateFrameData();

	/*! \brief Gets the most recent calculated average framerate. */
	Uint32 CalculateAverageFPS();

	/*! \brief Gets the total ticks since the global timer started.*/
	Uint32 GetGlobalTicks();

	/*! \brief Gets the total ticks since the last loop cycle.*/
	Uint32 GetDeltaTicks();

	/*! \brief Checks if it is time to render on the screen,
	 * based on the current time and settings. */
	bool CanRender();

private:
	//The frames per second timer
	//SGB_Timer fpsTimer;

	//The frames per second cap timer
	//SGB_Timer capTimer;

	//Timer to measure how much time has passed since the last =BeginUpdate= happened
	//SGB_Timer stepTimer;

	//Counter to accumulate how many frames have passed since the last FPS sampling
	int countedFrames;

	//Stores when the last FPS sampling happened
	Uint32 _lastFPSReset;

	//Stores how much time is expected to pass between frame rendering and calculation
	Uint32 _frameInterval;

	//Store the last (_initInfo.FrameRateSamplesPerSecond) framecounts between FPS samplings
	std::vector<Uint32> _fpsQueue;

	SGB_DisplayInitInfo _initInfo;

	Uint32 _currentAverageFPS;

	Uint32 _currentTime;
	Uint32 _totalElapsed;
	Uint32 _loopElapsed;
};

